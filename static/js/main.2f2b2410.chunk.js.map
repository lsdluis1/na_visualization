{"version":3,"sources":["components/toggleSwitch.js","api/parsePoints.js","constant.js","drawing/drawFunctionPoints.js","components/floatingPoint.js","canvas/pointCanvas.jsx","pointSetter.js","animations/absoluteAnimations/brownianMotion.js","index.js"],"names":["Toggle","props","toggle","useRef","checkbox","ref","name","className","type","defaultChecked","value","onClick","onChange","current","checked","classList","onToggle","positionParser","array","pathPoints","i","length","push","x","y","SCAN_RATE","drawFunctionPoints","ctx","points","style","color","width","sort","a","b","beginPath","map","point","index","nextPoint","moveTo","lineTo","strokeStyle","lineWidth","stroke","FloatingPoint","initialPosition","useMemo","position","initialAnimationFrameCount","animationFrameCount","absoluteAnimationDisplacementRef","relativeAnimationDisplacementRef","useState","deltaX","deltaY","lastX","lastY","dragData","setDragData","originIfUndefined","displacement","_","isUndefined","addPosition","p1","p2","updatePivotalPoint","key","absoluteAnimationDisplacement","relativeAnimationDisplacement","newPoint","handleDrag","animated","absoluteAnimation","relativeAnimation","useEffect","absoluteMovement","pointStyle","pointSize","animationDisplacement","onDrag","_event","left","top","height","borderRadius","background","opacity","PointCanvas","canvasRef","draw","lineStyle","canvasStyle","context","getContext","clearRect","canvas","fillStyle","arc","Math","PI","fill","drawCoordinates","PositionSetter","setAnimationFrameCount","_animationFrameCount","interval","setInterval","prev","clearInterval","onDoubleClick","handleDoubleClick","pivotalPoints","plotPoints","path","pivotal","pseudoNormalGenerator","n","randomValue","random","App","setAnimated","pivotalP","setPivotalP","plotP","setPlotP","plotPosition","rootElement","getAttribute","plotPositionParsed","JSON","parse","handleDragRef","draggedPoint","updateIndex","findIndex","p","sigma","handleDoubleClickRef","toString","testString","ReactCursorPosition","document","getElementById","setAttribute","concat","stringify","ReactDOM","render"],"mappings":"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","file":"static/js/main.2f2b2410.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./toggleSwitch.css\";\nToggle.propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  name: PropTypes.string,\n  checked: PropTypes.bool,\n};\nexport default function Toggle(props) {\n  const toggle = useRef();\n  const checkbox = useRef();\n  function handleToggle() {\n    if (props.onChange) props.onChange(checkbox.current.checked);\n    toggle.current.classList.toggle(\"toggled\");\n    checkbox.current.checked = !checkbox.current.checked;\n    if (props.onToggle) props.onToggle(checkbox.current.checked);\n  }\n  return (\n    <>\n      <input\n        ref={checkbox}\n        name={props.name}\n        className=\"toggle-checkbox\"\n        type=\"checkbox\"\n        defaultChecked={props.value}\n        value={props.value || false}\n      />\n      <span\n        ref={toggle}\n        onClick={handleToggle}\n        className={props.checked ? \"toggled toggle-switch\" : \"toggle-switch\"}\n      >\n        <span className=\"toggle\"></span>\n      </span>\n    </>\n  );\n}\n","export function positionParser(array) {\n  const pathPoints = [];\n\n  for (let i = 0; i < array.length / 2; i++) {\n    pathPoints.push({\n      x: array[2 * i],\n      y: array[2 * i + 1],\n    });\n  }\n\n  return pathPoints;\n}\n","export const SCAN_RATE = 60;\n","const drawFunctionPoints = (ctx, points, style) => {\n  const { color = \"black\", width = 1 } = style;\n\n  function sort_function(a, b) {\n    if (a.x > b.x) return 1;\n    if (a.x < b.x) return -1;\n    if (a.y > b.y) return 1;\n    if (a.y < b.y) return -1;\n  }\n  points.sort(sort_function);\n\n  if (points.length > 1) {\n    ctx.beginPath();\n    points.map((point, index) => {\n      if (index >= points.length - 1) {\n        return;\n      }\n      const nextPoint = points[index + 1];\n      ctx.moveTo(point.x, point.y);\n      ctx.lineTo(nextPoint.x, nextPoint.y);\n    });\n    ctx.strokeStyle = color;\n    ctx.lineWidth = width;\n    ctx.stroke();\n  }\n};\n\nexport default drawFunctionPoints;\n","import React, { useMemo, useEffect, useRef, useState } from \"react\";\nimport Draggable from \"react-draggable\";\nimport _ from \"lodash\";\n\nexport default function FloatingPoint(props) {\n  const initialPosition = useMemo(() => props.point.position, []);\n  const initialAnimationFrameCount = useMemo(\n    () => props.animationFrameCount,\n    []\n  );\n  const absoluteAnimationDisplacementRef = useRef();\n  const relativeAnimationDisplacementRef = useRef();\n\n  const [dragData, setDragData] = useState({\n    x: 0,\n    y: 0,\n    deltaX: 0,\n    deltaY: 0,\n    lastX: 0,\n    lastY: 0,\n  });\n\n  const originIfUndefined = (displacement) =>\n    _.isUndefined(displacement) ? { x: 0, y: 0 } : displacement;\n\n  const addPosition = (p1, p2) => ({ x: p1.x + p2.x, y: p1.y + p2.y });\n\n  const updatePivotalPoint = () => {\n    const { key } = props.point;\n    const absoluteAnimationDisplacement = originIfUndefined(\n      absoluteAnimationDisplacementRef.current\n    );\n\n    const relativeAnimationDisplacement = originIfUndefined(\n      relativeAnimationDisplacementRef.current\n    );\n\n    const newPosition = addPosition(\n      addPosition(initialPosition, dragData),\n      addPosition(absoluteAnimationDisplacement, relativeAnimationDisplacement)\n    );\n\n    const newPoint = { key, position: newPosition };\n    props.handleDrag(newPoint);\n  };\n\n  const {\n    animated,\n    absoluteAnimation,\n    relativeAnimation,\n    animationFrameCount,\n  } = props;\n\n  useEffect(() => {\n    if (animated) {\n      const absoluteMovement = absoluteAnimation();\n      absoluteAnimationDisplacementRef.current = addPosition(\n        originIfUndefined(absoluteAnimationDisplacementRef.current),\n        absoluteMovement\n      );\n      relativeAnimationDisplacementRef.current = relativeAnimation(\n        animationFrameCount - initialAnimationFrameCount\n      );\n      updatePivotalPoint();\n    }\n  }, [animationFrameCount]);\n\n  const handleDrag = (_event, dragData) => {\n    setDragData(dragData);\n    updatePivotalPoint();\n  };\n\n  const { pointSize, color } = props.pointStyle;\n  const absoluteAnimationDisplacement = originIfUndefined(\n    absoluteAnimationDisplacementRef.current\n  );\n  const relativeAnimationDisplacement = originIfUndefined(\n    relativeAnimationDisplacementRef.current\n  );\n\n  const animationDisplacement = addPosition(\n    relativeAnimationDisplacement,\n    absoluteAnimationDisplacement\n  );\n\n  return (\n    <Draggable onDrag={handleDrag}>\n      <div\n        className=\"drag-wrapper\"\n        style={{\n          position: \"absolute\",\n          left: initialPosition.x + animationDisplacement.x - pointSize,\n          top: initialPosition.y + animationDisplacement.y - pointSize,\n          width: 2 * pointSize,\n          height: 2 * pointSize,\n          borderRadius: \"100%\",\n          background: color,\n          opacity: 0,\n        }}\n      ></div>\n    </Draggable>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\nimport \"./pointCanvas.css\";\n\nfunction drawCoordinates(ctx, x, y, pointStyle) {\n  const { color = \"#ff2626\", pointSize = 10 } = pointStyle;\n  ctx.beginPath();\n  ctx.fillStyle = color;\n  ctx.arc(x, y, pointSize, 0, 2 * Math.PI);\n  ctx.fill();\n  ctx.stroke();\n}\n\nfunction PointCanvas(props) {\n  const canvasRef = useRef(null);\n  const {\n    draw,\n    pathPoints,\n    points,\n    pointStyle,\n    lineStyle,\n    canvasStyle,\n  } = props;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n\n    draw(context, pathPoints, lineStyle);\n    points.map((point) => {\n      drawCoordinates(context, point.x, point.y, pointStyle);\n    });\n  }, [points, pathPoints]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={canvasStyle.width}\n      height={canvasStyle.height}\n      {...props}\n    />\n  );\n}\n\nexport default PointCanvas;\n","import React, { useEffect, useState } from \"react\";\nimport drawFunctionPoints from \"./drawing/drawFunctionPoints\";\nimport FloatingPoint from \"./components/floatingPoint\";\nimport PointCanvas from \"./canvas/pointCanvas\";\nimport _ from \"lodash\";\nimport { SCAN_RATE } from \"./constant\";\n\nexport default function PositionSetter(props) {\n  const appendPoint = () => {\n    const { position } = props;\n    props.handleDoubleClick(position);\n  };\n\n  const [animationFrameCount, setAnimationFrameCount] = useState(0);\n\n  const {\n    animated,\n    absoluteAnimation = () => ({ x: 0, y: 0 }),\n    relativeAnimation = (_animationFrameCount) => ({ x: 0, y: 0 }),\n    lineWidth,\n    style,\n  } = props;\n  const { pointSize } = style;\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (animated) {\n        setAnimationFrameCount((prev) => prev + 1);\n      }\n    }, 1000 / SCAN_RATE);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [animated]);\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        height: \"100%\",\n        width: \"100%\",\n        background: \"skyblue\",\n      }}\n      onDoubleClick={appendPoint}\n    >\n      {props.pivotalPoints.map((point) => {\n        return (\n          <FloatingPoint\n            animated={animated}\n            absoluteAnimation={absoluteAnimation}\n            relativeAnimation={relativeAnimation}\n            animationFrameCount={animationFrameCount}\n            handleDrag={props.handleDrag}\n            point={point}\n            pointStyle={{ pointSize: 10, color: \"yellow\" }}\n          />\n        );\n      })}\n      <PointCanvas\n        draw={drawFunctionPoints}\n        pathPoints={props.plotPoints.path}\n        points={props.plotPoints.pivotal}\n        lineStyle={{ color: \"black\", width: lineWidth }}\n        pointStyle={{ color: \"red\", pointSize: pointSize }}\n        canvasStyle={{ width: 1600, height: 1000 }}\n      />\n    </div>\n  );\n}\n","import { SCAN_RATE } from \"../../constant\";\n\nconst pseudoNormalGenerator = (n) => {\n  var randomValue = 0;\n  for (var i = 0; i < n; i++) {\n    randomValue += Math.random();\n  }\n  return (randomValue - n / 2) / (n / 12) ** 2;\n};\n\nexport default function linear(sigma) {\n  return () => {\n    return {\n      x: (sigma * pseudoNormalGenerator(5)) / SCAN_RATE ** 0.5,\n      y: (sigma * pseudoNormalGenerator(5)) / SCAN_RATE ** 0.5,\n    };\n  };\n}\n","import ReactDOM from \"react-dom\";\nimport ReactCursorPosition from \"react-cursor-position\";\nimport Toggle from \"./components/toggleSwitch\";\nimport _ from \"lodash\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { positionParser } from \"./api/parsePoints\";\nimport circular from \"./animations/relativeAnimations/circular\";\n\nimport \"./styles.css\";\nimport PositionSetter from \"./pointSetter\";\nimport linear from \"./animations/absoluteAnimations/linear\";\nimport brownianMotion from \"./animations/absoluteAnimations/brownianMotion\";\n\nconst pivotalPoints = [];\n\nfunction App(props) {\n  const [animated, setAnimated] = useState(false);\n  const [pivotalP, setPivotalP] = useState([]);\n  const [plotP, setPlotP] = useState({ path: [], pivotal: [] });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setPivotalP([...pivotalPoints]);\n      const plotPosition = rootElement.getAttribute(\"plotPosition\");\n      const plotPositionParsed =\n        plotPosition == null\n          ? { path: [], pivotal: [] }\n          : JSON.parse(plotPosition);\n      plotPositionParsed.path = positionParser(plotPositionParsed.path);\n      plotPositionParsed.pivotal = positionParser(plotPositionParsed.pivotal);\n      setPlotP(plotPositionParsed);\n    }, 1000 / 60);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  const handleDragRef = useRef();\n  handleDragRef.current = (draggedPoint) => {\n    const updateIndex = _.findIndex(\n      pivotalPoints,\n      (p) => p.key === draggedPoint.key\n    );\n    pivotalPoints[updateIndex] = draggedPoint;\n  };\n\n  const handleDoubleClickRef = useRef();\n  handleDoubleClickRef.current = (position) => {\n    const MAX_POINT_NUM = 100;\n    const key = Math.random().toString(36);\n    if (pivotalPoints.length < MAX_POINT_NUM) {\n      pivotalPoints.push({ position, key });\n    }\n  };\n\n  return (\n    <div>\n      {props.testString}\n      <Toggle onToggle={setAnimated} />\n      <ReactCursorPosition style={{ position: \"absolute\" }}>\n        <PositionSetter\n          style={{ pointSize: 10, lineWidth: 5 }}\n          animated={animated}\n          // relativeAnimation={circular(100, 1, true)}\n          // absoluteAnimation={linear({ x: 10, y: 20 })}\n          absoluteAnimation={brownianMotion(5)}\n          handleDoubleClick={handleDoubleClickRef.current}\n          handleDrag={handleDragRef.current}\n          pivotalPoints={pivotalP}\n          plotPoints={plotP === null ? [] : plotP}\n        />\n      </ReactCursorPosition>\n    </div>\n  );\n}\nconst rootElement = document.getElementById(\"root\");\nvar testString = null;\n\nsetInterval(() => {\n  const str = \"\";\n  rootElement.setAttribute(\n    \"pivotalPosition\",\n    str.concat(\n      \"[\",\n      pivotalPoints\n        .map((point) => JSON.stringify([point.position.x, point.position.y]))\n        .toString(),\n      \"]\"\n    )\n  );\n}, 1000 / 60);\n\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}